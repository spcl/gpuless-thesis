// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CUBLASCALLS_H_
#define FLATBUFFERS_GENERATED_CUBLASCALLS_H_

#include "flatbuffers/flatbuffers.h"

struct FBCublasCreateV2;
struct FBCublasCreateV2Builder;

struct FBCublasSetStreamV2;
struct FBCublasSetStreamV2Builder;

struct FBCublasSetMathMode;
struct FBCublasSetMathModeBuilder;

struct FBCublasSgemmV2;
struct FBCublasSgemmV2Builder;

struct FBCublasCreateV2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FBCublasCreateV2Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VIRTUAL_HANDLE = 4
  };
  uint64_t virtual_handle() const {
    return GetField<uint64_t>(VT_VIRTUAL_HANDLE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_VIRTUAL_HANDLE) &&
           verifier.EndTable();
  }
};

struct FBCublasCreateV2Builder {
  typedef FBCublasCreateV2 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_virtual_handle(uint64_t virtual_handle) {
    fbb_.AddElement<uint64_t>(FBCublasCreateV2::VT_VIRTUAL_HANDLE, virtual_handle, 0);
  }
  explicit FBCublasCreateV2Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FBCublasCreateV2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FBCublasCreateV2>(end);
    return o;
  }
};

inline flatbuffers::Offset<FBCublasCreateV2> CreateFBCublasCreateV2(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t virtual_handle = 0) {
  FBCublasCreateV2Builder builder_(_fbb);
  builder_.add_virtual_handle(virtual_handle);
  return builder_.Finish();
}

struct FBCublasSetStreamV2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FBCublasSetStreamV2Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VIRTUAL_HANDLE = 4,
    VT_STREAM = 6
  };
  uint64_t virtual_handle() const {
    return GetField<uint64_t>(VT_VIRTUAL_HANDLE, 0);
  }
  uint64_t stream() const {
    return GetField<uint64_t>(VT_STREAM, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_VIRTUAL_HANDLE) &&
           VerifyField<uint64_t>(verifier, VT_STREAM) &&
           verifier.EndTable();
  }
};

struct FBCublasSetStreamV2Builder {
  typedef FBCublasSetStreamV2 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_virtual_handle(uint64_t virtual_handle) {
    fbb_.AddElement<uint64_t>(FBCublasSetStreamV2::VT_VIRTUAL_HANDLE, virtual_handle, 0);
  }
  void add_stream(uint64_t stream) {
    fbb_.AddElement<uint64_t>(FBCublasSetStreamV2::VT_STREAM, stream, 0);
  }
  explicit FBCublasSetStreamV2Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FBCublasSetStreamV2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FBCublasSetStreamV2>(end);
    return o;
  }
};

inline flatbuffers::Offset<FBCublasSetStreamV2> CreateFBCublasSetStreamV2(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t virtual_handle = 0,
    uint64_t stream = 0) {
  FBCublasSetStreamV2Builder builder_(_fbb);
  builder_.add_stream(stream);
  builder_.add_virtual_handle(virtual_handle);
  return builder_.Finish();
}

struct FBCublasSetMathMode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FBCublasSetMathModeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VIRTUAL_HANDLE = 4,
    VT_MATH_MODE = 6
  };
  uint64_t virtual_handle() const {
    return GetField<uint64_t>(VT_VIRTUAL_HANDLE, 0);
  }
  uint64_t math_mode() const {
    return GetField<uint64_t>(VT_MATH_MODE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_VIRTUAL_HANDLE) &&
           VerifyField<uint64_t>(verifier, VT_MATH_MODE) &&
           verifier.EndTable();
  }
};

struct FBCublasSetMathModeBuilder {
  typedef FBCublasSetMathMode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_virtual_handle(uint64_t virtual_handle) {
    fbb_.AddElement<uint64_t>(FBCublasSetMathMode::VT_VIRTUAL_HANDLE, virtual_handle, 0);
  }
  void add_math_mode(uint64_t math_mode) {
    fbb_.AddElement<uint64_t>(FBCublasSetMathMode::VT_MATH_MODE, math_mode, 0);
  }
  explicit FBCublasSetMathModeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FBCublasSetMathMode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FBCublasSetMathMode>(end);
    return o;
  }
};

inline flatbuffers::Offset<FBCublasSetMathMode> CreateFBCublasSetMathMode(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t virtual_handle = 0,
    uint64_t math_mode = 0) {
  FBCublasSetMathModeBuilder builder_(_fbb);
  builder_.add_math_mode(math_mode);
  builder_.add_virtual_handle(virtual_handle);
  return builder_.Finish();
}

struct FBCublasSgemmV2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FBCublasSgemmV2Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VIRTUAL_HANDLE = 4,
    VT_TRANSA_OP = 6,
    VT_TRANSB_OP = 8,
    VT_M = 10,
    VT_N = 12,
    VT_K = 14,
    VT_ALPHA = 16,
    VT_BETA = 18,
    VT_A = 20,
    VT_B = 22,
    VT_C = 24,
    VT_LDA = 26,
    VT_LDB = 28,
    VT_LDC = 30
  };
  uint64_t virtual_handle() const {
    return GetField<uint64_t>(VT_VIRTUAL_HANDLE, 0);
  }
  uint64_t transa_op() const {
    return GetField<uint64_t>(VT_TRANSA_OP, 0);
  }
  uint64_t transb_op() const {
    return GetField<uint64_t>(VT_TRANSB_OP, 0);
  }
  int32_t m() const {
    return GetField<int32_t>(VT_M, 0);
  }
  int32_t n() const {
    return GetField<int32_t>(VT_N, 0);
  }
  int32_t k() const {
    return GetField<int32_t>(VT_K, 0);
  }
  float alpha() const {
    return GetField<float>(VT_ALPHA, 0.0f);
  }
  float beta() const {
    return GetField<float>(VT_BETA, 0.0f);
  }
  uint64_t a() const {
    return GetField<uint64_t>(VT_A, 0);
  }
  uint64_t b() const {
    return GetField<uint64_t>(VT_B, 0);
  }
  uint64_t c() const {
    return GetField<uint64_t>(VT_C, 0);
  }
  int32_t lda() const {
    return GetField<int32_t>(VT_LDA, 0);
  }
  int32_t ldb() const {
    return GetField<int32_t>(VT_LDB, 0);
  }
  int32_t ldc() const {
    return GetField<int32_t>(VT_LDC, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_VIRTUAL_HANDLE) &&
           VerifyField<uint64_t>(verifier, VT_TRANSA_OP) &&
           VerifyField<uint64_t>(verifier, VT_TRANSB_OP) &&
           VerifyField<int32_t>(verifier, VT_M) &&
           VerifyField<int32_t>(verifier, VT_N) &&
           VerifyField<int32_t>(verifier, VT_K) &&
           VerifyField<float>(verifier, VT_ALPHA) &&
           VerifyField<float>(verifier, VT_BETA) &&
           VerifyField<uint64_t>(verifier, VT_A) &&
           VerifyField<uint64_t>(verifier, VT_B) &&
           VerifyField<uint64_t>(verifier, VT_C) &&
           VerifyField<int32_t>(verifier, VT_LDA) &&
           VerifyField<int32_t>(verifier, VT_LDB) &&
           VerifyField<int32_t>(verifier, VT_LDC) &&
           verifier.EndTable();
  }
};

struct FBCublasSgemmV2Builder {
  typedef FBCublasSgemmV2 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_virtual_handle(uint64_t virtual_handle) {
    fbb_.AddElement<uint64_t>(FBCublasSgemmV2::VT_VIRTUAL_HANDLE, virtual_handle, 0);
  }
  void add_transa_op(uint64_t transa_op) {
    fbb_.AddElement<uint64_t>(FBCublasSgemmV2::VT_TRANSA_OP, transa_op, 0);
  }
  void add_transb_op(uint64_t transb_op) {
    fbb_.AddElement<uint64_t>(FBCublasSgemmV2::VT_TRANSB_OP, transb_op, 0);
  }
  void add_m(int32_t m) {
    fbb_.AddElement<int32_t>(FBCublasSgemmV2::VT_M, m, 0);
  }
  void add_n(int32_t n) {
    fbb_.AddElement<int32_t>(FBCublasSgemmV2::VT_N, n, 0);
  }
  void add_k(int32_t k) {
    fbb_.AddElement<int32_t>(FBCublasSgemmV2::VT_K, k, 0);
  }
  void add_alpha(float alpha) {
    fbb_.AddElement<float>(FBCublasSgemmV2::VT_ALPHA, alpha, 0.0f);
  }
  void add_beta(float beta) {
    fbb_.AddElement<float>(FBCublasSgemmV2::VT_BETA, beta, 0.0f);
  }
  void add_a(uint64_t a) {
    fbb_.AddElement<uint64_t>(FBCublasSgemmV2::VT_A, a, 0);
  }
  void add_b(uint64_t b) {
    fbb_.AddElement<uint64_t>(FBCublasSgemmV2::VT_B, b, 0);
  }
  void add_c(uint64_t c) {
    fbb_.AddElement<uint64_t>(FBCublasSgemmV2::VT_C, c, 0);
  }
  void add_lda(int32_t lda) {
    fbb_.AddElement<int32_t>(FBCublasSgemmV2::VT_LDA, lda, 0);
  }
  void add_ldb(int32_t ldb) {
    fbb_.AddElement<int32_t>(FBCublasSgemmV2::VT_LDB, ldb, 0);
  }
  void add_ldc(int32_t ldc) {
    fbb_.AddElement<int32_t>(FBCublasSgemmV2::VT_LDC, ldc, 0);
  }
  explicit FBCublasSgemmV2Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FBCublasSgemmV2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FBCublasSgemmV2>(end);
    return o;
  }
};

inline flatbuffers::Offset<FBCublasSgemmV2> CreateFBCublasSgemmV2(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t virtual_handle = 0,
    uint64_t transa_op = 0,
    uint64_t transb_op = 0,
    int32_t m = 0,
    int32_t n = 0,
    int32_t k = 0,
    float alpha = 0.0f,
    float beta = 0.0f,
    uint64_t a = 0,
    uint64_t b = 0,
    uint64_t c = 0,
    int32_t lda = 0,
    int32_t ldb = 0,
    int32_t ldc = 0) {
  FBCublasSgemmV2Builder builder_(_fbb);
  builder_.add_c(c);
  builder_.add_b(b);
  builder_.add_a(a);
  builder_.add_transb_op(transb_op);
  builder_.add_transa_op(transa_op);
  builder_.add_virtual_handle(virtual_handle);
  builder_.add_ldc(ldc);
  builder_.add_ldb(ldb);
  builder_.add_lda(lda);
  builder_.add_beta(beta);
  builder_.add_alpha(alpha);
  builder_.add_k(k);
  builder_.add_n(n);
  builder_.add_m(m);
  return builder_.Finish();
}

#endif  // FLATBUFFERS_GENERATED_CUBLASCALLS_H_
