// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRACEEXECUTIONPROTOCOL_GPULESS_H_
#define FLATBUFFERS_GENERATED_TRACEEXECUTIONPROTOCOL_GPULESS_H_

#include "flatbuffers/flatbuffers.h"

#include "cublas_calls_generated.h"
#include "cudevice_attributes_generated.h"
#include "cudnn_calls_generated.h"
#include "cuda_runtime_calls_generated.h"

namespace gpuless {

struct FBCudaApiCall;
struct FBCudaApiCallBuilder;

struct FBNewModule;
struct FBNewModuleBuilder;

struct FBNewFunction;
struct FBNewFunctionBuilder;

struct FBTraceExecRequest;
struct FBTraceExecRequestBuilder;

struct FBTraceExecResponse;
struct FBTraceExecResponseBuilder;

struct FBTraceAttributeRequest;
struct FBTraceAttributeRequestBuilder;

struct FBTraceAttributeResponse;
struct FBTraceAttributeResponseBuilder;

struct FBProtocolMessage;
struct FBProtocolMessageBuilder;

enum FBStatus : int8_t {
  FBStatus_OK = 0,
  FBStatus_FAILURE = 1,
  FBStatus_MIN = FBStatus_OK,
  FBStatus_MAX = FBStatus_FAILURE
};

inline const FBStatus (&EnumValuesFBStatus())[2] {
  static const FBStatus values[] = {
    FBStatus_OK,
    FBStatus_FAILURE
  };
  return values;
}

inline const char * const *EnumNamesFBStatus() {
  static const char * const names[3] = {
    "OK",
    "FAILURE",
    nullptr
  };
  return names;
}

inline const char *EnumNameFBStatus(FBStatus e) {
  if (flatbuffers::IsOutRange(e, FBStatus_OK, FBStatus_FAILURE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFBStatus()[index];
}

enum FBCudaApiCallUnion : uint8_t {
  FBCudaApiCallUnion_NONE = 0,
  FBCudaApiCallUnion_FBCudaMalloc = 1,
  FBCudaApiCallUnion_FBCudaMemcpyH2D = 2,
  FBCudaApiCallUnion_FBCudaMemcpyD2H = 3,
  FBCudaApiCallUnion_FBCudaMemcpyD2D = 4,
  FBCudaApiCallUnion_FBCudaMemcpyAsyncH2D = 5,
  FBCudaApiCallUnion_FBCudaMemcpyAsyncD2H = 6,
  FBCudaApiCallUnion_FBCudaMemcpyAsyncD2D = 7,
  FBCudaApiCallUnion_FBCudaLaunchKernel = 8,
  FBCudaApiCallUnion_FBCudaFree = 9,
  FBCudaApiCallUnion_FBCudaStreamSynchronize = 10,
  FBCudaApiCallUnion_FBCudaGetDeviceProperties = 11,
  FBCudaApiCallUnion_FBCublasCreateV2 = 12,
  FBCudaApiCallUnion_FBCublasSetStreamV2 = 13,
  FBCudaApiCallUnion_FBCublasSetMathMode = 14,
  FBCudaApiCallUnion_FBCublasSgemmV2 = 15,
  FBCudaApiCallUnion_FBCudnnCreate = 16,
  FBCudaApiCallUnion_FBCudnnSetStream = 17,
  FBCudaApiCallUnion_FBCudnnCreateTensorDescriptor = 18,
  FBCudaApiCallUnion_FBCudnnSetTensorNdDescriptor = 19,
  FBCudaApiCallUnion_FBCudnnCreateFilterDescriptor = 20,
  FBCudaApiCallUnion_FBCudnnSetFilterNdDescriptor = 21,
  FBCudaApiCallUnion_FBCudnnCreateConvolutionDescriptor = 22,
  FBCudaApiCallUnion_FBCudnnSetConvolutionGroupCount = 23,
  FBCudaApiCallUnion_FBCudnnSetConvolutionMathType = 24,
  FBCudaApiCallUnion_FBCudnnSetConvolutionNdDescriptor = 25,
  FBCudaApiCallUnion_FBCudnnGetConvolutionForwardAlgorithmV7 = 26,
  FBCudaApiCallUnion_FBCudnnConvolutionForward = 27,
  FBCudaApiCallUnion_FBCudnnBatchNormalizationForwardInference = 28,
  FBCudaApiCallUnion_FBCudnnDestroyConvolutionDescriptor = 29,
  FBCudaApiCallUnion_FBCudnnDestroyFilterDescriptor = 30,
  FBCudaApiCallUnion_FBCudnnDestroyTensorDescriptor = 31,
  FBCudaApiCallUnion_MIN = FBCudaApiCallUnion_NONE,
  FBCudaApiCallUnion_MAX = FBCudaApiCallUnion_FBCudnnDestroyTensorDescriptor
};

inline const FBCudaApiCallUnion (&EnumValuesFBCudaApiCallUnion())[32] {
  static const FBCudaApiCallUnion values[] = {
    FBCudaApiCallUnion_NONE,
    FBCudaApiCallUnion_FBCudaMalloc,
    FBCudaApiCallUnion_FBCudaMemcpyH2D,
    FBCudaApiCallUnion_FBCudaMemcpyD2H,
    FBCudaApiCallUnion_FBCudaMemcpyD2D,
    FBCudaApiCallUnion_FBCudaMemcpyAsyncH2D,
    FBCudaApiCallUnion_FBCudaMemcpyAsyncD2H,
    FBCudaApiCallUnion_FBCudaMemcpyAsyncD2D,
    FBCudaApiCallUnion_FBCudaLaunchKernel,
    FBCudaApiCallUnion_FBCudaFree,
    FBCudaApiCallUnion_FBCudaStreamSynchronize,
    FBCudaApiCallUnion_FBCudaGetDeviceProperties,
    FBCudaApiCallUnion_FBCublasCreateV2,
    FBCudaApiCallUnion_FBCublasSetStreamV2,
    FBCudaApiCallUnion_FBCublasSetMathMode,
    FBCudaApiCallUnion_FBCublasSgemmV2,
    FBCudaApiCallUnion_FBCudnnCreate,
    FBCudaApiCallUnion_FBCudnnSetStream,
    FBCudaApiCallUnion_FBCudnnCreateTensorDescriptor,
    FBCudaApiCallUnion_FBCudnnSetTensorNdDescriptor,
    FBCudaApiCallUnion_FBCudnnCreateFilterDescriptor,
    FBCudaApiCallUnion_FBCudnnSetFilterNdDescriptor,
    FBCudaApiCallUnion_FBCudnnCreateConvolutionDescriptor,
    FBCudaApiCallUnion_FBCudnnSetConvolutionGroupCount,
    FBCudaApiCallUnion_FBCudnnSetConvolutionMathType,
    FBCudaApiCallUnion_FBCudnnSetConvolutionNdDescriptor,
    FBCudaApiCallUnion_FBCudnnGetConvolutionForwardAlgorithmV7,
    FBCudaApiCallUnion_FBCudnnConvolutionForward,
    FBCudaApiCallUnion_FBCudnnBatchNormalizationForwardInference,
    FBCudaApiCallUnion_FBCudnnDestroyConvolutionDescriptor,
    FBCudaApiCallUnion_FBCudnnDestroyFilterDescriptor,
    FBCudaApiCallUnion_FBCudnnDestroyTensorDescriptor
  };
  return values;
}

inline const char * const *EnumNamesFBCudaApiCallUnion() {
  static const char * const names[33] = {
    "NONE",
    "FBCudaMalloc",
    "FBCudaMemcpyH2D",
    "FBCudaMemcpyD2H",
    "FBCudaMemcpyD2D",
    "FBCudaMemcpyAsyncH2D",
    "FBCudaMemcpyAsyncD2H",
    "FBCudaMemcpyAsyncD2D",
    "FBCudaLaunchKernel",
    "FBCudaFree",
    "FBCudaStreamSynchronize",
    "FBCudaGetDeviceProperties",
    "FBCublasCreateV2",
    "FBCublasSetStreamV2",
    "FBCublasSetMathMode",
    "FBCublasSgemmV2",
    "FBCudnnCreate",
    "FBCudnnSetStream",
    "FBCudnnCreateTensorDescriptor",
    "FBCudnnSetTensorNdDescriptor",
    "FBCudnnCreateFilterDescriptor",
    "FBCudnnSetFilterNdDescriptor",
    "FBCudnnCreateConvolutionDescriptor",
    "FBCudnnSetConvolutionGroupCount",
    "FBCudnnSetConvolutionMathType",
    "FBCudnnSetConvolutionNdDescriptor",
    "FBCudnnGetConvolutionForwardAlgorithmV7",
    "FBCudnnConvolutionForward",
    "FBCudnnBatchNormalizationForwardInference",
    "FBCudnnDestroyConvolutionDescriptor",
    "FBCudnnDestroyFilterDescriptor",
    "FBCudnnDestroyTensorDescriptor",
    nullptr
  };
  return names;
}

inline const char *EnumNameFBCudaApiCallUnion(FBCudaApiCallUnion e) {
  if (flatbuffers::IsOutRange(e, FBCudaApiCallUnion_NONE, FBCudaApiCallUnion_FBCudnnDestroyTensorDescriptor)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFBCudaApiCallUnion()[index];
}

template<typename T> struct FBCudaApiCallUnionTraits {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_NONE;
};

template<> struct FBCudaApiCallUnionTraits<FBCudaMalloc> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudaMalloc;
};

template<> struct FBCudaApiCallUnionTraits<FBCudaMemcpyH2D> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudaMemcpyH2D;
};

template<> struct FBCudaApiCallUnionTraits<FBCudaMemcpyD2H> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudaMemcpyD2H;
};

template<> struct FBCudaApiCallUnionTraits<FBCudaMemcpyD2D> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudaMemcpyD2D;
};

template<> struct FBCudaApiCallUnionTraits<FBCudaMemcpyAsyncH2D> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudaMemcpyAsyncH2D;
};

template<> struct FBCudaApiCallUnionTraits<FBCudaMemcpyAsyncD2H> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudaMemcpyAsyncD2H;
};

template<> struct FBCudaApiCallUnionTraits<FBCudaMemcpyAsyncD2D> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudaMemcpyAsyncD2D;
};

template<> struct FBCudaApiCallUnionTraits<FBCudaLaunchKernel> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudaLaunchKernel;
};

template<> struct FBCudaApiCallUnionTraits<FBCudaFree> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudaFree;
};

template<> struct FBCudaApiCallUnionTraits<FBCudaStreamSynchronize> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudaStreamSynchronize;
};

template<> struct FBCudaApiCallUnionTraits<FBCudaGetDeviceProperties> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudaGetDeviceProperties;
};

template<> struct FBCudaApiCallUnionTraits<FBCublasCreateV2> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCublasCreateV2;
};

template<> struct FBCudaApiCallUnionTraits<FBCublasSetStreamV2> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCublasSetStreamV2;
};

template<> struct FBCudaApiCallUnionTraits<FBCublasSetMathMode> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCublasSetMathMode;
};

template<> struct FBCudaApiCallUnionTraits<FBCublasSgemmV2> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCublasSgemmV2;
};

template<> struct FBCudaApiCallUnionTraits<FBCudnnCreate> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudnnCreate;
};

template<> struct FBCudaApiCallUnionTraits<FBCudnnSetStream> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudnnSetStream;
};

template<> struct FBCudaApiCallUnionTraits<FBCudnnCreateTensorDescriptor> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudnnCreateTensorDescriptor;
};

template<> struct FBCudaApiCallUnionTraits<FBCudnnSetTensorNdDescriptor> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudnnSetTensorNdDescriptor;
};

template<> struct FBCudaApiCallUnionTraits<FBCudnnCreateFilterDescriptor> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudnnCreateFilterDescriptor;
};

template<> struct FBCudaApiCallUnionTraits<FBCudnnSetFilterNdDescriptor> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudnnSetFilterNdDescriptor;
};

template<> struct FBCudaApiCallUnionTraits<FBCudnnCreateConvolutionDescriptor> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudnnCreateConvolutionDescriptor;
};

template<> struct FBCudaApiCallUnionTraits<FBCudnnSetConvolutionGroupCount> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudnnSetConvolutionGroupCount;
};

template<> struct FBCudaApiCallUnionTraits<FBCudnnSetConvolutionMathType> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudnnSetConvolutionMathType;
};

template<> struct FBCudaApiCallUnionTraits<FBCudnnSetConvolutionNdDescriptor> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudnnSetConvolutionNdDescriptor;
};

template<> struct FBCudaApiCallUnionTraits<FBCudnnGetConvolutionForwardAlgorithmV7> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudnnGetConvolutionForwardAlgorithmV7;
};

template<> struct FBCudaApiCallUnionTraits<FBCudnnConvolutionForward> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudnnConvolutionForward;
};

template<> struct FBCudaApiCallUnionTraits<FBCudnnBatchNormalizationForwardInference> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudnnBatchNormalizationForwardInference;
};

template<> struct FBCudaApiCallUnionTraits<FBCudnnDestroyConvolutionDescriptor> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudnnDestroyConvolutionDescriptor;
};

template<> struct FBCudaApiCallUnionTraits<FBCudnnDestroyFilterDescriptor> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudnnDestroyFilterDescriptor;
};

template<> struct FBCudaApiCallUnionTraits<FBCudnnDestroyTensorDescriptor> {
  static const FBCudaApiCallUnion enum_value = FBCudaApiCallUnion_FBCudnnDestroyTensorDescriptor;
};

bool VerifyFBCudaApiCallUnion(flatbuffers::Verifier &verifier, const void *obj, FBCudaApiCallUnion type);
bool VerifyFBCudaApiCallUnionVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

enum FBMessage : uint8_t {
  FBMessage_NONE = 0,
  FBMessage_FBTraceExecRequest = 1,
  FBMessage_FBTraceExecResponse = 2,
  FBMessage_FBTraceAttributeRequest = 3,
  FBMessage_FBTraceAttributeResponse = 4,
  FBMessage_MIN = FBMessage_NONE,
  FBMessage_MAX = FBMessage_FBTraceAttributeResponse
};

inline const FBMessage (&EnumValuesFBMessage())[5] {
  static const FBMessage values[] = {
    FBMessage_NONE,
    FBMessage_FBTraceExecRequest,
    FBMessage_FBTraceExecResponse,
    FBMessage_FBTraceAttributeRequest,
    FBMessage_FBTraceAttributeResponse
  };
  return values;
}

inline const char * const *EnumNamesFBMessage() {
  static const char * const names[6] = {
    "NONE",
    "FBTraceExecRequest",
    "FBTraceExecResponse",
    "FBTraceAttributeRequest",
    "FBTraceAttributeResponse",
    nullptr
  };
  return names;
}

inline const char *EnumNameFBMessage(FBMessage e) {
  if (flatbuffers::IsOutRange(e, FBMessage_NONE, FBMessage_FBTraceAttributeResponse)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFBMessage()[index];
}

template<typename T> struct FBMessageTraits {
  static const FBMessage enum_value = FBMessage_NONE;
};

template<> struct FBMessageTraits<gpuless::FBTraceExecRequest> {
  static const FBMessage enum_value = FBMessage_FBTraceExecRequest;
};

template<> struct FBMessageTraits<gpuless::FBTraceExecResponse> {
  static const FBMessage enum_value = FBMessage_FBTraceExecResponse;
};

template<> struct FBMessageTraits<gpuless::FBTraceAttributeRequest> {
  static const FBMessage enum_value = FBMessage_FBTraceAttributeRequest;
};

template<> struct FBMessageTraits<gpuless::FBTraceAttributeResponse> {
  static const FBMessage enum_value = FBMessage_FBTraceAttributeResponse;
};

bool VerifyFBMessage(flatbuffers::Verifier &verifier, const void *obj, FBMessage type);
bool VerifyFBMessageVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct FBCudaApiCall FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FBCudaApiCallBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_API_CALL_TYPE = 4,
    VT_API_CALL = 6
  };
  gpuless::FBCudaApiCallUnion api_call_type() const {
    return static_cast<gpuless::FBCudaApiCallUnion>(GetField<uint8_t>(VT_API_CALL_TYPE, 0));
  }
  const void *api_call() const {
    return GetPointer<const void *>(VT_API_CALL);
  }
  template<typename T> const T *api_call_as() const;
  const FBCudaMalloc *api_call_as_FBCudaMalloc() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudaMalloc ? static_cast<const FBCudaMalloc *>(api_call()) : nullptr;
  }
  const FBCudaMemcpyH2D *api_call_as_FBCudaMemcpyH2D() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudaMemcpyH2D ? static_cast<const FBCudaMemcpyH2D *>(api_call()) : nullptr;
  }
  const FBCudaMemcpyD2H *api_call_as_FBCudaMemcpyD2H() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudaMemcpyD2H ? static_cast<const FBCudaMemcpyD2H *>(api_call()) : nullptr;
  }
  const FBCudaMemcpyD2D *api_call_as_FBCudaMemcpyD2D() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudaMemcpyD2D ? static_cast<const FBCudaMemcpyD2D *>(api_call()) : nullptr;
  }
  const FBCudaMemcpyAsyncH2D *api_call_as_FBCudaMemcpyAsyncH2D() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudaMemcpyAsyncH2D ? static_cast<const FBCudaMemcpyAsyncH2D *>(api_call()) : nullptr;
  }
  const FBCudaMemcpyAsyncD2H *api_call_as_FBCudaMemcpyAsyncD2H() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudaMemcpyAsyncD2H ? static_cast<const FBCudaMemcpyAsyncD2H *>(api_call()) : nullptr;
  }
  const FBCudaMemcpyAsyncD2D *api_call_as_FBCudaMemcpyAsyncD2D() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudaMemcpyAsyncD2D ? static_cast<const FBCudaMemcpyAsyncD2D *>(api_call()) : nullptr;
  }
  const FBCudaLaunchKernel *api_call_as_FBCudaLaunchKernel() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudaLaunchKernel ? static_cast<const FBCudaLaunchKernel *>(api_call()) : nullptr;
  }
  const FBCudaFree *api_call_as_FBCudaFree() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudaFree ? static_cast<const FBCudaFree *>(api_call()) : nullptr;
  }
  const FBCudaStreamSynchronize *api_call_as_FBCudaStreamSynchronize() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudaStreamSynchronize ? static_cast<const FBCudaStreamSynchronize *>(api_call()) : nullptr;
  }
  const FBCudaGetDeviceProperties *api_call_as_FBCudaGetDeviceProperties() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudaGetDeviceProperties ? static_cast<const FBCudaGetDeviceProperties *>(api_call()) : nullptr;
  }
  const FBCublasCreateV2 *api_call_as_FBCublasCreateV2() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCublasCreateV2 ? static_cast<const FBCublasCreateV2 *>(api_call()) : nullptr;
  }
  const FBCublasSetStreamV2 *api_call_as_FBCublasSetStreamV2() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCublasSetStreamV2 ? static_cast<const FBCublasSetStreamV2 *>(api_call()) : nullptr;
  }
  const FBCublasSetMathMode *api_call_as_FBCublasSetMathMode() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCublasSetMathMode ? static_cast<const FBCublasSetMathMode *>(api_call()) : nullptr;
  }
  const FBCublasSgemmV2 *api_call_as_FBCublasSgemmV2() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCublasSgemmV2 ? static_cast<const FBCublasSgemmV2 *>(api_call()) : nullptr;
  }
  const FBCudnnCreate *api_call_as_FBCudnnCreate() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudnnCreate ? static_cast<const FBCudnnCreate *>(api_call()) : nullptr;
  }
  const FBCudnnSetStream *api_call_as_FBCudnnSetStream() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudnnSetStream ? static_cast<const FBCudnnSetStream *>(api_call()) : nullptr;
  }
  const FBCudnnCreateTensorDescriptor *api_call_as_FBCudnnCreateTensorDescriptor() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudnnCreateTensorDescriptor ? static_cast<const FBCudnnCreateTensorDescriptor *>(api_call()) : nullptr;
  }
  const FBCudnnSetTensorNdDescriptor *api_call_as_FBCudnnSetTensorNdDescriptor() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudnnSetTensorNdDescriptor ? static_cast<const FBCudnnSetTensorNdDescriptor *>(api_call()) : nullptr;
  }
  const FBCudnnCreateFilterDescriptor *api_call_as_FBCudnnCreateFilterDescriptor() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudnnCreateFilterDescriptor ? static_cast<const FBCudnnCreateFilterDescriptor *>(api_call()) : nullptr;
  }
  const FBCudnnSetFilterNdDescriptor *api_call_as_FBCudnnSetFilterNdDescriptor() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudnnSetFilterNdDescriptor ? static_cast<const FBCudnnSetFilterNdDescriptor *>(api_call()) : nullptr;
  }
  const FBCudnnCreateConvolutionDescriptor *api_call_as_FBCudnnCreateConvolutionDescriptor() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudnnCreateConvolutionDescriptor ? static_cast<const FBCudnnCreateConvolutionDescriptor *>(api_call()) : nullptr;
  }
  const FBCudnnSetConvolutionGroupCount *api_call_as_FBCudnnSetConvolutionGroupCount() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudnnSetConvolutionGroupCount ? static_cast<const FBCudnnSetConvolutionGroupCount *>(api_call()) : nullptr;
  }
  const FBCudnnSetConvolutionMathType *api_call_as_FBCudnnSetConvolutionMathType() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudnnSetConvolutionMathType ? static_cast<const FBCudnnSetConvolutionMathType *>(api_call()) : nullptr;
  }
  const FBCudnnSetConvolutionNdDescriptor *api_call_as_FBCudnnSetConvolutionNdDescriptor() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudnnSetConvolutionNdDescriptor ? static_cast<const FBCudnnSetConvolutionNdDescriptor *>(api_call()) : nullptr;
  }
  const FBCudnnGetConvolutionForwardAlgorithmV7 *api_call_as_FBCudnnGetConvolutionForwardAlgorithmV7() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudnnGetConvolutionForwardAlgorithmV7 ? static_cast<const FBCudnnGetConvolutionForwardAlgorithmV7 *>(api_call()) : nullptr;
  }
  const FBCudnnConvolutionForward *api_call_as_FBCudnnConvolutionForward() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudnnConvolutionForward ? static_cast<const FBCudnnConvolutionForward *>(api_call()) : nullptr;
  }
  const FBCudnnBatchNormalizationForwardInference *api_call_as_FBCudnnBatchNormalizationForwardInference() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudnnBatchNormalizationForwardInference ? static_cast<const FBCudnnBatchNormalizationForwardInference *>(api_call()) : nullptr;
  }
  const FBCudnnDestroyConvolutionDescriptor *api_call_as_FBCudnnDestroyConvolutionDescriptor() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudnnDestroyConvolutionDescriptor ? static_cast<const FBCudnnDestroyConvolutionDescriptor *>(api_call()) : nullptr;
  }
  const FBCudnnDestroyFilterDescriptor *api_call_as_FBCudnnDestroyFilterDescriptor() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudnnDestroyFilterDescriptor ? static_cast<const FBCudnnDestroyFilterDescriptor *>(api_call()) : nullptr;
  }
  const FBCudnnDestroyTensorDescriptor *api_call_as_FBCudnnDestroyTensorDescriptor() const {
    return api_call_type() == gpuless::FBCudaApiCallUnion_FBCudnnDestroyTensorDescriptor ? static_cast<const FBCudnnDestroyTensorDescriptor *>(api_call()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_API_CALL_TYPE) &&
           VerifyOffset(verifier, VT_API_CALL) &&
           VerifyFBCudaApiCallUnion(verifier, api_call(), api_call_type()) &&
           verifier.EndTable();
  }
};

template<> inline const FBCudaMalloc *FBCudaApiCall::api_call_as<FBCudaMalloc>() const {
  return api_call_as_FBCudaMalloc();
}

template<> inline const FBCudaMemcpyH2D *FBCudaApiCall::api_call_as<FBCudaMemcpyH2D>() const {
  return api_call_as_FBCudaMemcpyH2D();
}

template<> inline const FBCudaMemcpyD2H *FBCudaApiCall::api_call_as<FBCudaMemcpyD2H>() const {
  return api_call_as_FBCudaMemcpyD2H();
}

template<> inline const FBCudaMemcpyD2D *FBCudaApiCall::api_call_as<FBCudaMemcpyD2D>() const {
  return api_call_as_FBCudaMemcpyD2D();
}

template<> inline const FBCudaMemcpyAsyncH2D *FBCudaApiCall::api_call_as<FBCudaMemcpyAsyncH2D>() const {
  return api_call_as_FBCudaMemcpyAsyncH2D();
}

template<> inline const FBCudaMemcpyAsyncD2H *FBCudaApiCall::api_call_as<FBCudaMemcpyAsyncD2H>() const {
  return api_call_as_FBCudaMemcpyAsyncD2H();
}

template<> inline const FBCudaMemcpyAsyncD2D *FBCudaApiCall::api_call_as<FBCudaMemcpyAsyncD2D>() const {
  return api_call_as_FBCudaMemcpyAsyncD2D();
}

template<> inline const FBCudaLaunchKernel *FBCudaApiCall::api_call_as<FBCudaLaunchKernel>() const {
  return api_call_as_FBCudaLaunchKernel();
}

template<> inline const FBCudaFree *FBCudaApiCall::api_call_as<FBCudaFree>() const {
  return api_call_as_FBCudaFree();
}

template<> inline const FBCudaStreamSynchronize *FBCudaApiCall::api_call_as<FBCudaStreamSynchronize>() const {
  return api_call_as_FBCudaStreamSynchronize();
}

template<> inline const FBCudaGetDeviceProperties *FBCudaApiCall::api_call_as<FBCudaGetDeviceProperties>() const {
  return api_call_as_FBCudaGetDeviceProperties();
}

template<> inline const FBCublasCreateV2 *FBCudaApiCall::api_call_as<FBCublasCreateV2>() const {
  return api_call_as_FBCublasCreateV2();
}

template<> inline const FBCublasSetStreamV2 *FBCudaApiCall::api_call_as<FBCublasSetStreamV2>() const {
  return api_call_as_FBCublasSetStreamV2();
}

template<> inline const FBCublasSetMathMode *FBCudaApiCall::api_call_as<FBCublasSetMathMode>() const {
  return api_call_as_FBCublasSetMathMode();
}

template<> inline const FBCublasSgemmV2 *FBCudaApiCall::api_call_as<FBCublasSgemmV2>() const {
  return api_call_as_FBCublasSgemmV2();
}

template<> inline const FBCudnnCreate *FBCudaApiCall::api_call_as<FBCudnnCreate>() const {
  return api_call_as_FBCudnnCreate();
}

template<> inline const FBCudnnSetStream *FBCudaApiCall::api_call_as<FBCudnnSetStream>() const {
  return api_call_as_FBCudnnSetStream();
}

template<> inline const FBCudnnCreateTensorDescriptor *FBCudaApiCall::api_call_as<FBCudnnCreateTensorDescriptor>() const {
  return api_call_as_FBCudnnCreateTensorDescriptor();
}

template<> inline const FBCudnnSetTensorNdDescriptor *FBCudaApiCall::api_call_as<FBCudnnSetTensorNdDescriptor>() const {
  return api_call_as_FBCudnnSetTensorNdDescriptor();
}

template<> inline const FBCudnnCreateFilterDescriptor *FBCudaApiCall::api_call_as<FBCudnnCreateFilterDescriptor>() const {
  return api_call_as_FBCudnnCreateFilterDescriptor();
}

template<> inline const FBCudnnSetFilterNdDescriptor *FBCudaApiCall::api_call_as<FBCudnnSetFilterNdDescriptor>() const {
  return api_call_as_FBCudnnSetFilterNdDescriptor();
}

template<> inline const FBCudnnCreateConvolutionDescriptor *FBCudaApiCall::api_call_as<FBCudnnCreateConvolutionDescriptor>() const {
  return api_call_as_FBCudnnCreateConvolutionDescriptor();
}

template<> inline const FBCudnnSetConvolutionGroupCount *FBCudaApiCall::api_call_as<FBCudnnSetConvolutionGroupCount>() const {
  return api_call_as_FBCudnnSetConvolutionGroupCount();
}

template<> inline const FBCudnnSetConvolutionMathType *FBCudaApiCall::api_call_as<FBCudnnSetConvolutionMathType>() const {
  return api_call_as_FBCudnnSetConvolutionMathType();
}

template<> inline const FBCudnnSetConvolutionNdDescriptor *FBCudaApiCall::api_call_as<FBCudnnSetConvolutionNdDescriptor>() const {
  return api_call_as_FBCudnnSetConvolutionNdDescriptor();
}

template<> inline const FBCudnnGetConvolutionForwardAlgorithmV7 *FBCudaApiCall::api_call_as<FBCudnnGetConvolutionForwardAlgorithmV7>() const {
  return api_call_as_FBCudnnGetConvolutionForwardAlgorithmV7();
}

template<> inline const FBCudnnConvolutionForward *FBCudaApiCall::api_call_as<FBCudnnConvolutionForward>() const {
  return api_call_as_FBCudnnConvolutionForward();
}

template<> inline const FBCudnnBatchNormalizationForwardInference *FBCudaApiCall::api_call_as<FBCudnnBatchNormalizationForwardInference>() const {
  return api_call_as_FBCudnnBatchNormalizationForwardInference();
}

template<> inline const FBCudnnDestroyConvolutionDescriptor *FBCudaApiCall::api_call_as<FBCudnnDestroyConvolutionDescriptor>() const {
  return api_call_as_FBCudnnDestroyConvolutionDescriptor();
}

template<> inline const FBCudnnDestroyFilterDescriptor *FBCudaApiCall::api_call_as<FBCudnnDestroyFilterDescriptor>() const {
  return api_call_as_FBCudnnDestroyFilterDescriptor();
}

template<> inline const FBCudnnDestroyTensorDescriptor *FBCudaApiCall::api_call_as<FBCudnnDestroyTensorDescriptor>() const {
  return api_call_as_FBCudnnDestroyTensorDescriptor();
}

struct FBCudaApiCallBuilder {
  typedef FBCudaApiCall Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_api_call_type(gpuless::FBCudaApiCallUnion api_call_type) {
    fbb_.AddElement<uint8_t>(FBCudaApiCall::VT_API_CALL_TYPE, static_cast<uint8_t>(api_call_type), 0);
  }
  void add_api_call(flatbuffers::Offset<void> api_call) {
    fbb_.AddOffset(FBCudaApiCall::VT_API_CALL, api_call);
  }
  explicit FBCudaApiCallBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FBCudaApiCall> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FBCudaApiCall>(end);
    return o;
  }
};

inline flatbuffers::Offset<FBCudaApiCall> CreateFBCudaApiCall(
    flatbuffers::FlatBufferBuilder &_fbb,
    gpuless::FBCudaApiCallUnion api_call_type = gpuless::FBCudaApiCallUnion_NONE,
    flatbuffers::Offset<void> api_call = 0) {
  FBCudaApiCallBuilder builder_(_fbb);
  builder_.add_api_call(api_call);
  builder_.add_api_call_type(api_call_type);
  return builder_.Finish();
}

struct FBNewModule FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FBNewModuleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BUFFER = 4,
    VT_MODULE_ID = 6
  };
  const flatbuffers::Vector<uint8_t> *buffer() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_BUFFER);
  }
  uint64_t module_id() const {
    return GetField<uint64_t>(VT_MODULE_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BUFFER) &&
           verifier.VerifyVector(buffer()) &&
           VerifyField<uint64_t>(verifier, VT_MODULE_ID) &&
           verifier.EndTable();
  }
};

struct FBNewModuleBuilder {
  typedef FBNewModule Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_buffer(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> buffer) {
    fbb_.AddOffset(FBNewModule::VT_BUFFER, buffer);
  }
  void add_module_id(uint64_t module_id) {
    fbb_.AddElement<uint64_t>(FBNewModule::VT_MODULE_ID, module_id, 0);
  }
  explicit FBNewModuleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FBNewModule> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FBNewModule>(end);
    return o;
  }
};

inline flatbuffers::Offset<FBNewModule> CreateFBNewModule(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> buffer = 0,
    uint64_t module_id = 0) {
  FBNewModuleBuilder builder_(_fbb);
  builder_.add_module_id(module_id);
  builder_.add_buffer(buffer);
  return builder_.Finish();
}

inline flatbuffers::Offset<FBNewModule> CreateFBNewModuleDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *buffer = nullptr,
    uint64_t module_id = 0) {
  auto buffer__ = buffer ? _fbb.CreateVector<uint8_t>(*buffer) : 0;
  return gpuless::CreateFBNewModule(
      _fbb,
      buffer__,
      module_id);
}

struct FBNewFunction FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FBNewFunctionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SYMBOL = 4,
    VT_MODULE_ID = 6
  };
  const flatbuffers::String *symbol() const {
    return GetPointer<const flatbuffers::String *>(VT_SYMBOL);
  }
  uint64_t module_id() const {
    return GetField<uint64_t>(VT_MODULE_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SYMBOL) &&
           verifier.VerifyString(symbol()) &&
           VerifyField<uint64_t>(verifier, VT_MODULE_ID) &&
           verifier.EndTable();
  }
};

struct FBNewFunctionBuilder {
  typedef FBNewFunction Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_symbol(flatbuffers::Offset<flatbuffers::String> symbol) {
    fbb_.AddOffset(FBNewFunction::VT_SYMBOL, symbol);
  }
  void add_module_id(uint64_t module_id) {
    fbb_.AddElement<uint64_t>(FBNewFunction::VT_MODULE_ID, module_id, 0);
  }
  explicit FBNewFunctionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FBNewFunction> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FBNewFunction>(end);
    return o;
  }
};

inline flatbuffers::Offset<FBNewFunction> CreateFBNewFunction(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> symbol = 0,
    uint64_t module_id = 0) {
  FBNewFunctionBuilder builder_(_fbb);
  builder_.add_module_id(module_id);
  builder_.add_symbol(symbol);
  return builder_.Finish();
}

inline flatbuffers::Offset<FBNewFunction> CreateFBNewFunctionDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *symbol = nullptr,
    uint64_t module_id = 0) {
  auto symbol__ = symbol ? _fbb.CreateString(symbol) : 0;
  return gpuless::CreateFBNewFunction(
      _fbb,
      symbol__,
      module_id);
}

struct FBTraceExecRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FBTraceExecRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TRACE = 4,
    VT_NEW_MODULES = 6,
    VT_NEW_FUNCTIONS = 8
  };
  const flatbuffers::Vector<flatbuffers::Offset<gpuless::FBCudaApiCall>> *trace() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<gpuless::FBCudaApiCall>> *>(VT_TRACE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<gpuless::FBNewModule>> *new_modules() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<gpuless::FBNewModule>> *>(VT_NEW_MODULES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<gpuless::FBNewFunction>> *new_functions() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<gpuless::FBNewFunction>> *>(VT_NEW_FUNCTIONS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TRACE) &&
           verifier.VerifyVector(trace()) &&
           verifier.VerifyVectorOfTables(trace()) &&
           VerifyOffset(verifier, VT_NEW_MODULES) &&
           verifier.VerifyVector(new_modules()) &&
           verifier.VerifyVectorOfTables(new_modules()) &&
           VerifyOffset(verifier, VT_NEW_FUNCTIONS) &&
           verifier.VerifyVector(new_functions()) &&
           verifier.VerifyVectorOfTables(new_functions()) &&
           verifier.EndTable();
  }
};

struct FBTraceExecRequestBuilder {
  typedef FBTraceExecRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_trace(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<gpuless::FBCudaApiCall>>> trace) {
    fbb_.AddOffset(FBTraceExecRequest::VT_TRACE, trace);
  }
  void add_new_modules(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<gpuless::FBNewModule>>> new_modules) {
    fbb_.AddOffset(FBTraceExecRequest::VT_NEW_MODULES, new_modules);
  }
  void add_new_functions(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<gpuless::FBNewFunction>>> new_functions) {
    fbb_.AddOffset(FBTraceExecRequest::VT_NEW_FUNCTIONS, new_functions);
  }
  explicit FBTraceExecRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FBTraceExecRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FBTraceExecRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<FBTraceExecRequest> CreateFBTraceExecRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<gpuless::FBCudaApiCall>>> trace = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<gpuless::FBNewModule>>> new_modules = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<gpuless::FBNewFunction>>> new_functions = 0) {
  FBTraceExecRequestBuilder builder_(_fbb);
  builder_.add_new_functions(new_functions);
  builder_.add_new_modules(new_modules);
  builder_.add_trace(trace);
  return builder_.Finish();
}

inline flatbuffers::Offset<FBTraceExecRequest> CreateFBTraceExecRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<gpuless::FBCudaApiCall>> *trace = nullptr,
    const std::vector<flatbuffers::Offset<gpuless::FBNewModule>> *new_modules = nullptr,
    const std::vector<flatbuffers::Offset<gpuless::FBNewFunction>> *new_functions = nullptr) {
  auto trace__ = trace ? _fbb.CreateVector<flatbuffers::Offset<gpuless::FBCudaApiCall>>(*trace) : 0;
  auto new_modules__ = new_modules ? _fbb.CreateVector<flatbuffers::Offset<gpuless::FBNewModule>>(*new_modules) : 0;
  auto new_functions__ = new_functions ? _fbb.CreateVector<flatbuffers::Offset<gpuless::FBNewFunction>>(*new_functions) : 0;
  return gpuless::CreateFBTraceExecRequest(
      _fbb,
      trace__,
      new_modules__,
      new_functions__);
}

struct FBTraceExecResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FBTraceExecResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4,
    VT_TRACE_TOP = 6
  };
  gpuless::FBStatus status() const {
    return static_cast<gpuless::FBStatus>(GetField<int8_t>(VT_STATUS, 0));
  }
  const gpuless::FBCudaApiCall *trace_top() const {
    return GetPointer<const gpuless::FBCudaApiCall *>(VT_TRACE_TOP);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_STATUS) &&
           VerifyOffset(verifier, VT_TRACE_TOP) &&
           verifier.VerifyTable(trace_top()) &&
           verifier.EndTable();
  }
};

struct FBTraceExecResponseBuilder {
  typedef FBTraceExecResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status(gpuless::FBStatus status) {
    fbb_.AddElement<int8_t>(FBTraceExecResponse::VT_STATUS, static_cast<int8_t>(status), 0);
  }
  void add_trace_top(flatbuffers::Offset<gpuless::FBCudaApiCall> trace_top) {
    fbb_.AddOffset(FBTraceExecResponse::VT_TRACE_TOP, trace_top);
  }
  explicit FBTraceExecResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FBTraceExecResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FBTraceExecResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<FBTraceExecResponse> CreateFBTraceExecResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    gpuless::FBStatus status = gpuless::FBStatus_OK,
    flatbuffers::Offset<gpuless::FBCudaApiCall> trace_top = 0) {
  FBTraceExecResponseBuilder builder_(_fbb);
  builder_.add_trace_top(trace_top);
  builder_.add_status(status);
  return builder_.Finish();
}

struct FBTraceAttributeRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FBTraceAttributeRequestBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct FBTraceAttributeRequestBuilder {
  typedef FBTraceAttributeRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit FBTraceAttributeRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FBTraceAttributeRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FBTraceAttributeRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<FBTraceAttributeRequest> CreateFBTraceAttributeRequest(
    flatbuffers::FlatBufferBuilder &_fbb) {
  FBTraceAttributeRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct FBTraceAttributeResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FBTraceAttributeResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4,
    VT_TOTAL_MEM = 6,
    VT_DEVICE_ATTRIBUTES = 8
  };
  gpuless::FBStatus status() const {
    return static_cast<gpuless::FBStatus>(GetField<int8_t>(VT_STATUS, 0));
  }
  uint64_t total_mem() const {
    return GetField<uint64_t>(VT_TOTAL_MEM, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<CUdeviceAttributeValue>> *device_attributes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<CUdeviceAttributeValue>> *>(VT_DEVICE_ATTRIBUTES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_STATUS) &&
           VerifyField<uint64_t>(verifier, VT_TOTAL_MEM) &&
           VerifyOffset(verifier, VT_DEVICE_ATTRIBUTES) &&
           verifier.VerifyVector(device_attributes()) &&
           verifier.VerifyVectorOfTables(device_attributes()) &&
           verifier.EndTable();
  }
};

struct FBTraceAttributeResponseBuilder {
  typedef FBTraceAttributeResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status(gpuless::FBStatus status) {
    fbb_.AddElement<int8_t>(FBTraceAttributeResponse::VT_STATUS, static_cast<int8_t>(status), 0);
  }
  void add_total_mem(uint64_t total_mem) {
    fbb_.AddElement<uint64_t>(FBTraceAttributeResponse::VT_TOTAL_MEM, total_mem, 0);
  }
  void add_device_attributes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CUdeviceAttributeValue>>> device_attributes) {
    fbb_.AddOffset(FBTraceAttributeResponse::VT_DEVICE_ATTRIBUTES, device_attributes);
  }
  explicit FBTraceAttributeResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FBTraceAttributeResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FBTraceAttributeResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<FBTraceAttributeResponse> CreateFBTraceAttributeResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    gpuless::FBStatus status = gpuless::FBStatus_OK,
    uint64_t total_mem = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CUdeviceAttributeValue>>> device_attributes = 0) {
  FBTraceAttributeResponseBuilder builder_(_fbb);
  builder_.add_total_mem(total_mem);
  builder_.add_device_attributes(device_attributes);
  builder_.add_status(status);
  return builder_.Finish();
}

inline flatbuffers::Offset<FBTraceAttributeResponse> CreateFBTraceAttributeResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    gpuless::FBStatus status = gpuless::FBStatus_OK,
    uint64_t total_mem = 0,
    const std::vector<flatbuffers::Offset<CUdeviceAttributeValue>> *device_attributes = nullptr) {
  auto device_attributes__ = device_attributes ? _fbb.CreateVector<flatbuffers::Offset<CUdeviceAttributeValue>>(*device_attributes) : 0;
  return gpuless::CreateFBTraceAttributeResponse(
      _fbb,
      status,
      total_mem,
      device_attributes__);
}

struct FBProtocolMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FBProtocolMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE_TYPE = 4,
    VT_MESSAGE = 6
  };
  gpuless::FBMessage message_type() const {
    return static_cast<gpuless::FBMessage>(GetField<uint8_t>(VT_MESSAGE_TYPE, 0));
  }
  const void *message() const {
    return GetPointer<const void *>(VT_MESSAGE);
  }
  template<typename T> const T *message_as() const;
  const gpuless::FBTraceExecRequest *message_as_FBTraceExecRequest() const {
    return message_type() == gpuless::FBMessage_FBTraceExecRequest ? static_cast<const gpuless::FBTraceExecRequest *>(message()) : nullptr;
  }
  const gpuless::FBTraceExecResponse *message_as_FBTraceExecResponse() const {
    return message_type() == gpuless::FBMessage_FBTraceExecResponse ? static_cast<const gpuless::FBTraceExecResponse *>(message()) : nullptr;
  }
  const gpuless::FBTraceAttributeRequest *message_as_FBTraceAttributeRequest() const {
    return message_type() == gpuless::FBMessage_FBTraceAttributeRequest ? static_cast<const gpuless::FBTraceAttributeRequest *>(message()) : nullptr;
  }
  const gpuless::FBTraceAttributeResponse *message_as_FBTraceAttributeResponse() const {
    return message_type() == gpuless::FBMessage_FBTraceAttributeResponse ? static_cast<const gpuless::FBTraceAttributeResponse *>(message()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MESSAGE_TYPE) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           VerifyFBMessage(verifier, message(), message_type()) &&
           verifier.EndTable();
  }
};

template<> inline const gpuless::FBTraceExecRequest *FBProtocolMessage::message_as<gpuless::FBTraceExecRequest>() const {
  return message_as_FBTraceExecRequest();
}

template<> inline const gpuless::FBTraceExecResponse *FBProtocolMessage::message_as<gpuless::FBTraceExecResponse>() const {
  return message_as_FBTraceExecResponse();
}

template<> inline const gpuless::FBTraceAttributeRequest *FBProtocolMessage::message_as<gpuless::FBTraceAttributeRequest>() const {
  return message_as_FBTraceAttributeRequest();
}

template<> inline const gpuless::FBTraceAttributeResponse *FBProtocolMessage::message_as<gpuless::FBTraceAttributeResponse>() const {
  return message_as_FBTraceAttributeResponse();
}

struct FBProtocolMessageBuilder {
  typedef FBProtocolMessage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_message_type(gpuless::FBMessage message_type) {
    fbb_.AddElement<uint8_t>(FBProtocolMessage::VT_MESSAGE_TYPE, static_cast<uint8_t>(message_type), 0);
  }
  void add_message(flatbuffers::Offset<void> message) {
    fbb_.AddOffset(FBProtocolMessage::VT_MESSAGE, message);
  }
  explicit FBProtocolMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FBProtocolMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FBProtocolMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<FBProtocolMessage> CreateFBProtocolMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    gpuless::FBMessage message_type = gpuless::FBMessage_NONE,
    flatbuffers::Offset<void> message = 0) {
  FBProtocolMessageBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_message_type(message_type);
  return builder_.Finish();
}

inline bool VerifyFBCudaApiCallUnion(flatbuffers::Verifier &verifier, const void *obj, FBCudaApiCallUnion type) {
  switch (type) {
    case FBCudaApiCallUnion_NONE: {
      return true;
    }
    case FBCudaApiCallUnion_FBCudaMalloc: {
      auto ptr = reinterpret_cast<const FBCudaMalloc *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudaMemcpyH2D: {
      auto ptr = reinterpret_cast<const FBCudaMemcpyH2D *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudaMemcpyD2H: {
      auto ptr = reinterpret_cast<const FBCudaMemcpyD2H *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudaMemcpyD2D: {
      auto ptr = reinterpret_cast<const FBCudaMemcpyD2D *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudaMemcpyAsyncH2D: {
      auto ptr = reinterpret_cast<const FBCudaMemcpyAsyncH2D *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudaMemcpyAsyncD2H: {
      auto ptr = reinterpret_cast<const FBCudaMemcpyAsyncD2H *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudaMemcpyAsyncD2D: {
      auto ptr = reinterpret_cast<const FBCudaMemcpyAsyncD2D *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudaLaunchKernel: {
      auto ptr = reinterpret_cast<const FBCudaLaunchKernel *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudaFree: {
      auto ptr = reinterpret_cast<const FBCudaFree *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudaStreamSynchronize: {
      auto ptr = reinterpret_cast<const FBCudaStreamSynchronize *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudaGetDeviceProperties: {
      auto ptr = reinterpret_cast<const FBCudaGetDeviceProperties *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCublasCreateV2: {
      auto ptr = reinterpret_cast<const FBCublasCreateV2 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCublasSetStreamV2: {
      auto ptr = reinterpret_cast<const FBCublasSetStreamV2 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCublasSetMathMode: {
      auto ptr = reinterpret_cast<const FBCublasSetMathMode *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCublasSgemmV2: {
      auto ptr = reinterpret_cast<const FBCublasSgemmV2 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudnnCreate: {
      auto ptr = reinterpret_cast<const FBCudnnCreate *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudnnSetStream: {
      auto ptr = reinterpret_cast<const FBCudnnSetStream *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudnnCreateTensorDescriptor: {
      auto ptr = reinterpret_cast<const FBCudnnCreateTensorDescriptor *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudnnSetTensorNdDescriptor: {
      auto ptr = reinterpret_cast<const FBCudnnSetTensorNdDescriptor *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudnnCreateFilterDescriptor: {
      auto ptr = reinterpret_cast<const FBCudnnCreateFilterDescriptor *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudnnSetFilterNdDescriptor: {
      auto ptr = reinterpret_cast<const FBCudnnSetFilterNdDescriptor *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudnnCreateConvolutionDescriptor: {
      auto ptr = reinterpret_cast<const FBCudnnCreateConvolutionDescriptor *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudnnSetConvolutionGroupCount: {
      auto ptr = reinterpret_cast<const FBCudnnSetConvolutionGroupCount *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudnnSetConvolutionMathType: {
      auto ptr = reinterpret_cast<const FBCudnnSetConvolutionMathType *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudnnSetConvolutionNdDescriptor: {
      auto ptr = reinterpret_cast<const FBCudnnSetConvolutionNdDescriptor *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudnnGetConvolutionForwardAlgorithmV7: {
      auto ptr = reinterpret_cast<const FBCudnnGetConvolutionForwardAlgorithmV7 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudnnConvolutionForward: {
      auto ptr = reinterpret_cast<const FBCudnnConvolutionForward *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudnnBatchNormalizationForwardInference: {
      auto ptr = reinterpret_cast<const FBCudnnBatchNormalizationForwardInference *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudnnDestroyConvolutionDescriptor: {
      auto ptr = reinterpret_cast<const FBCudnnDestroyConvolutionDescriptor *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudnnDestroyFilterDescriptor: {
      auto ptr = reinterpret_cast<const FBCudnnDestroyFilterDescriptor *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBCudaApiCallUnion_FBCudnnDestroyTensorDescriptor: {
      auto ptr = reinterpret_cast<const FBCudnnDestroyTensorDescriptor *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyFBCudaApiCallUnionVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyFBCudaApiCallUnion(
        verifier,  values->Get(i), types->GetEnum<FBCudaApiCallUnion>(i))) {
      return false;
    }
  }
  return true;
}

inline bool VerifyFBMessage(flatbuffers::Verifier &verifier, const void *obj, FBMessage type) {
  switch (type) {
    case FBMessage_NONE: {
      return true;
    }
    case FBMessage_FBTraceExecRequest: {
      auto ptr = reinterpret_cast<const gpuless::FBTraceExecRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBMessage_FBTraceExecResponse: {
      auto ptr = reinterpret_cast<const gpuless::FBTraceExecResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBMessage_FBTraceAttributeRequest: {
      auto ptr = reinterpret_cast<const gpuless::FBTraceAttributeRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FBMessage_FBTraceAttributeResponse: {
      auto ptr = reinterpret_cast<const gpuless::FBTraceAttributeResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyFBMessageVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyFBMessage(
        verifier,  values->Get(i), types->GetEnum<FBMessage>(i))) {
      return false;
    }
  }
  return true;
}

inline const gpuless::FBProtocolMessage *GetFBProtocolMessage(const void *buf) {
  return flatbuffers::GetRoot<gpuless::FBProtocolMessage>(buf);
}

inline const gpuless::FBProtocolMessage *GetSizePrefixedFBProtocolMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<gpuless::FBProtocolMessage>(buf);
}

inline bool VerifyFBProtocolMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<gpuless::FBProtocolMessage>(nullptr);
}

inline bool VerifySizePrefixedFBProtocolMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<gpuless::FBProtocolMessage>(nullptr);
}

inline void FinishFBProtocolMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gpuless::FBProtocolMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFBProtocolMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gpuless::FBProtocolMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace gpuless

#endif  // FLATBUFFERS_GENERATED_TRACEEXECUTIONPROTOCOL_GPULESS_H_
